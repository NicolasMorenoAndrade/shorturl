
(ns shorturl.db
  (:require [next.jdbc :as jdbc]
            [honey.sql :as sql]
            [honey.sql.helpers :as h]
            [shorturl.env :refer [env]]))

(def db-spec
  "Database connection specification for PostgreSQL.
   Uses environment variables for configuration."
  {:dbtype "postgresql"
   :dbname (env :DBNAME)
   :host (env :HOST)
   :user (env :SHORTURL_DB_USER)
   :password (env :SHORTURL_DB_PASSWORD)
   :ssl (env :SSL)
   :sslmode (env :SSLMODE)})

(def ds
  "JDBC datasource created from database specification."
  (jdbc/get-datasource db-spec))

(defn execute-query
  "Execute an SQL query against the database.
   Takes a query map (typically generated by honey.sql)."
  [q]
  (jdbc/execute! ds q))

(defn get-url
  "Retrieve the original URL for a given short code/slug.
   Returns nil if the slug doesn't exist."
  [slug]
  (-> (execute-query (-> (h/select :*)
                         (h/from :shortened_urls)
                         (h/where [:= :slug slug])
                         (sql/format)))
      first
      :shortened_urls/original_url))

(defn insert-url-redirection!
  "Create a new URL redirection by storing the original URL and its short code.
   Returns the result of the insert operation."
  [url slug]
  (execute-query (-> (h/insert-into :shortened_urls)
                     (h/columns :original_url :slug)
                     (h/values [[url slug]])
                     (sql/format))))

(defn remove-by-slug!
  "Delete a URL redirection by its short code/slug.
   Returns the result of the delete operation."
  [slug]
  (execute-query (-> (h/delete-from :shortened_urls)
                     (h/where [:= :slug slug])
                     (sql/format))))

(defn remove-by-url!
  "Delete a URL redirection by its original URL.
   Returns the result of the delete operation."
  [url]
  (execute-query (-> (h/delete-from :shortened_urls)
                     (h/where [:= :original_url url])
                     (sql/format))))

(comment
;; Test connection
  (jdbc/execute! ds ["SELECT 1"])

  (require '[shorturl.migrations :as mig])
  (mig/create-shortened-urls-table!)

  (jdbc/execute! ds ["CREATE TABLE IF NOT EXISTS shortened_urls (
                    id SERIAL PRIMARY KEY,
                    original_url TEXT NOT NULL,
                    slug VARCHAR(10) UNIQUE NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                  )"])

  (jdbc/execute! ds ["SELECT * FROM shortened_urls"])

  (jdbc/execute! ds (sql/format {:select [:*]
                                 :from [:shortened_urls]}))

  (jdbc/execute! ds
                 (->
                  (h/select :*)
                  (h/from :shortened_urls)
                  (sql/format)))

  (execute-query  (->
                   (h/select :*)
                   (h/from :shortened_urls)
                   (sql/format)))

  (execute-query (-> (h/insert-into :shortened_urls)
                     (h/columns :original_url :slug)
                     (h/values
                      [["https://github.com/seancorfield/honeysql" "abc"]])
                     (sql/format)))

  (execute-query (-> (h/insert-into :shortened_urls)
                     (h/columns :original_url :slug)
                     (h/values
                      [["https://www.youtube.com/watch?v=0mrguRPgCzI&t=477s" "backend"]])
                     (sql/format)))

  (get-url "PRTF")

  (execute-query (-> (h/select :*)
                     (h/from :shortened_urls)
                     (h/where [:= :slug "backend"])
                     (sql/format)))

  (insert-url-redirection! "https://clojure.org/releases/downloads" "clj")

  (remove-by-slug! "shorturlFE")
  (remove-by-url! "https://github.com/seancorfield/honeysql"))
